using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class PatientVisit
{
    public int Id;
    public string PatientName;
    public DateTime VisitDate;
    public string VisitType;
    public string Description;
    public string DoctorName;
}

public class PatientVisitManager
{
    private List<PatientVisit> visits;
    private int nextId;
    private string filePath;
    private string[] visitTypes = {"Checkup", "Emergency", "Follow-up", "Consultation", "Surgery", "Lab Test", "X-Ray", "Vaccination", "Physical Therapy", "Dental"};
    private string[] patientNames = {"Ahmed Ali", "Sara Khan", "Muhammad Hassan", "Fatima Sheikh", "Ali Raza", "Ayesha Malik", "Usman Ahmed", "Zainab Hussain", "Hassan Ali", "Mariam Qureshi", "Bilal Shah", "Sana Tariq", "Imran Khan", "Nida Zahra", "Farhan Malik"};
    private string[] doctorNames = {"Dr. Ahmad", "Dr. Fatima", "Dr. Hassan", "Dr. Ayesha", "Dr. Ali", "Dr. Sara", "Dr. Usman", "Dr. Zainab", "Dr. Bilal", "Dr. Mariam"};

    public PatientVisitManager(string fileName = "patient_visits.txt")
    {
        visits = new List<PatientVisit>();
        nextId = 1;
        filePath = fileName;
        loadData();
    }

    public void AddVisit(string patientName, DateTime visitDate, string visitType, string description, string doctorName = "")
    {
        PatientVisit visit = new PatientVisit();
        visit.Id = nextId++;
        visit.PatientName = patientName;
        visit.VisitDate = visitDate;
        visit.VisitType = visitType;
        visit.Description = description;
        visit.DoctorName = doctorName;
        
        visits.Add(visit);
        saveData();
        Console.WriteLine("Visit added! ID: " + visit.Id);
    }

    public void UpdateVisit(int id, string patientName = null, DateTime? visitDate = null, string visitType = null, string description = null, string doctorName = null)
    {
        PatientVisit visit = null;
        for(int i = 0; i < visits.Count; i++)
        {
            if(visits[i].Id == id)
            {
                visit = visits[i];
                break;
            }
        }
        
        if (visit == null)
        {
            Console.WriteLine("Visit not found bro!");
            return;
        }

        if (patientName != null) visit.PatientName = patientName;
        if (visitDate.HasValue) visit.VisitDate = visitDate.Value;
        if (visitType != null) visit.VisitType = visitType;
        if (description != null) visit.Description = description;
        if (doctorName != null) visit.DoctorName = doctorName;

        saveData();
        Console.WriteLine("Updated successfully!");
    }

    public void DeleteVisit(int id)
    {
        PatientVisit visitToRemove = null;
        for(int i = 0; i < visits.Count; i++)
        {
            if(visits[i].Id == id)
            {
                visitToRemove = visits[i];
                break;
            }
        }
        
        if (visitToRemove == null)
        {
            Console.WriteLine("Visit not found!");
            return;
        }

        visits.Remove(visitToRemove);
        saveData();
        Console.WriteLine("Visit deleted!");
    }

    public PatientVisit findById(int id)
    {
        for(int i = 0; i < visits.Count; i++)
        {
            if(visits[i].Id == id)
                return visits[i];
        }
        return null;
    }

    public List<PatientVisit> getAllVisits()
    {
        return visits;
    }

    public List<PatientVisit> getVisitsByType(string visitType)
    {
        List<PatientVisit> result = new List<PatientVisit>();
        for(int i = 0; i < visits.Count; i++)
        {
            if(visits[i].VisitType.ToLower().Contains(visitType.ToLower()))
            {
                result.Add(visits[i]);
            }
        }
        return result;
    }

    public void showVisit(PatientVisit visit)
    {
        if (visit == null)
        {
            Console.WriteLine("No visit found man!");
            return;
        }

        Console.WriteLine("\n" + "=".PadRight(80, '='));
        Console.WriteLine("ID: " + visit.Id);
        Console.WriteLine("Patient: " + visit.PatientName);
        Console.WriteLine("Date: " + visit.VisitDate.ToString("yyyy-MM-dd"));
        Console.WriteLine("Type: " + visit.VisitType);
        Console.WriteLine("Description: " + visit.Description);
        Console.WriteLine("Doctor: " + (string.IsNullOrEmpty(visit.DoctorName) ? "Not specified" : visit.DoctorName));
        Console.WriteLine("=".PadRight(80, '='));
    }

    public void showAllRecords()
    {
        if (visits.Count == 0)
        {
            Console.WriteLine("No records found buddy!");
            return;
        }

        Console.WriteLine("\n--- All Patient Records ---");
        for(int i = 0; i < visits.Count; i++)
        {
            PatientVisit v = visits[i];
            Console.WriteLine($"{v.Id} | {v.PatientName} | {v.VisitDate:yyyy-MM-dd} | {v.VisitType} | {v.Description} | {v.DoctorName}");
        }
        Console.WriteLine("--- End of Records ---");
    }

    public void showVisitsByCategory()
    {
        Dictionary<string, int> counts = new Dictionary<string, int>();
        
        for(int i = 0; i < visits.Count; i++)
        {
            string type = visits[i].VisitType;
            if(counts.ContainsKey(type))
                counts[type]++;
            else
                counts[type] = 1;
        }

        Console.WriteLine("\n--- Visit Categories ---");
        foreach(var item in counts)
        {
            Console.WriteLine(item.Key + ": " + item.Value + " visits");
        }
        Console.WriteLine("--- End Categories ---");
    }

    public void generateVisitSummary(int visitId)
    {
        PatientVisit visit = findById(visitId);
        if(visit == null)
        {
            Console.WriteLine("Visit not found!");
            return;
        }

        Console.WriteLine("\n*** Individual Visit Summary ***");
        Console.WriteLine("Visit ID: " + visit.Id);
        Console.WriteLine("Patient Name: " + visit.PatientName);
        Console.WriteLine("Visit Date: " + visit.VisitDate.ToString("dddd, MMMM dd, yyyy"));
        Console.WriteLine("Visit Type: " + visit.VisitType);
        Console.WriteLine("Description/Notes: " + visit.Description);
        Console.WriteLine("Attending Doctor: " + (string.IsNullOrEmpty(visit.DoctorName) ? "Not assigned" : visit.DoctorName));
        Console.WriteLine("*****************************");
    }

    public void getTotalVisitsByType()
    {
        Dictionary<string, int> typeCounts = new Dictionary<string, int>();
        
        for(int i = 0; i < visits.Count; i++)
        {
            string type = visits[i].VisitType;
            if(typeCounts.ContainsKey(type))
                typeCounts[type]++;
            else
                typeCounts[type] = 1;
        }

        Console.WriteLine("\n*** Total Visits by Type ***");
        int totalVisits = 0;
        foreach(var pair in typeCounts)
        {
            Console.WriteLine(pair.Key + ": " + pair.Value + " visits");
            totalVisits += pair.Value;
        }
        Console.WriteLine("Total Overall: " + totalVisits + " visits");
        Console.WriteLine("****************************");
    }

    public void getWeeklySummary()
    {
        DateTime today = DateTime.Now;
        DateTime weekStart = today.AddDays(-(int)today.DayOfWeek);
        DateTime weekEnd = weekStart.AddDays(7);

        List<PatientVisit> weeklyVisits = new List<PatientVisit>();
        for(int i = 0; i < visits.Count; i++)
        {
            if(visits[i].VisitDate >= weekStart && visits[i].VisitDate < weekEnd)
            {
                weeklyVisits.Add(visits[i]);
            }
        }

        Console.WriteLine("\n*** Weekly Visit Summary ***");
        Console.WriteLine("Week: " + weekStart.ToString("MMM dd") + " - " + weekEnd.AddDays(-1).ToString("MMM dd, yyyy"));
        Console.WriteLine("Total visits this week: " + weeklyVisits.Count);

        Dictionary<string, int> dailyCounts = new Dictionary<string, int>();
        for(int i = 0; i < weeklyVisits.Count; i++)
        {
            string day = weeklyVisits[i].VisitDate.ToString("dddd");
            if(dailyCounts.ContainsKey(day))
                dailyCounts[day]++;
            else
                dailyCounts[day] = 1;
        }

        Console.WriteLine("\nDaily breakdown:");
        string[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        for(int i = 0; i < days.Length; i++)
        {
            int count = dailyCounts.ContainsKey(days[i]) ? dailyCounts[days[i]] : 0;
            Console.WriteLine(days[i] + ": " + count + " visits");
        }
        Console.WriteLine("****************************");
    }

    public void generateMockData(int count = 350)
    {
        Random rand = new Random();
        Console.WriteLine("Generating " + count + " mock entries...");

        for(int i = 0; i < count; i++)
        {
            string patientName = patientNames[rand.Next(patientNames.Length)];
            string visitType = visitTypes[rand.Next(visitTypes.Length)];
            string doctorName = rand.Next(100) < 80 ? doctorNames[rand.Next(doctorNames.Length)] : "";
            
            DateTime visitDate = DateTime.Now.AddDays(-rand.Next(365));
            
            string[] descriptions = {
                "Regular checkup completed",
                "Patient complained of headache",
                "Follow up for previous treatment",
                "Emergency visit - fever",
                "Routine blood test",
                "X-ray examination done",
                "Vaccination administered",
                "Physical therapy session",
                "Consultation for back pain",
                "Lab results reviewed"
            };
            string description = descriptions[rand.Next(descriptions.Length)];

            PatientVisit visit = new PatientVisit();
            visit.Id = nextId++;
            visit.PatientName = patientName;
            visit.VisitDate = visitDate;
            visit.VisitType = visitType; 
            visit.Description = description;
            visit.DoctorName = doctorName;
            
            visits.Add(visit);
        }

        saveData();
        Console.WriteLine("Mock data generated successfully! Total records: " + visits.Count);
    }

    private void saveData()
    {
        try
        {
            StreamWriter writer = new StreamWriter(filePath);
            for(int i = 0; i < visits.Count; i++)
            {
                PatientVisit visit = visits[i];
                string line = visit.Id + "|" + visit.PatientName + "|" + 
                             visit.VisitDate.ToString("yyyy-MM-dd HH:mm:ss") + "|" + 
                             visit.VisitType + "|" + visit.Description + "|" + visit.DoctorName;
                writer.WriteLine(line);
            }
            writer.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving file: " + ex.Message);
        }
    }

    private void loadData()
    {
        try
        {
            if (File.Exists(filePath))
            {
                string[] lines = File.ReadAllLines(filePath);
                for(int i = 0; i < lines.Length; i++)
                {
                    string line = lines[i];
                    if (!string.IsNullOrEmpty(line))
                    {
                        string[] parts = line.Split('|');
                        if (parts.Length >= 5)
                        {
                            PatientVisit visit = new PatientVisit();
                            visit.Id = int.Parse(parts[0]);
                            visit.PatientName = parts[1];
                            visit.VisitDate = DateTime.Parse(parts[2]);
                            visit.VisitType = parts[3];
                            visit.Description = parts[4];
                            visit.DoctorName = parts.Length > 5 ? parts[5] : "";
                            
                            visits.Add(visit);
                            if (visit.Id >= nextId)
                                nextId = visit.Id + 1;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading file: " + ex.Message);
        }
    }
}

public class Program
{
    public static void Main()
    {
        PatientVisitManager manager = new PatientVisitManager();
        
        while (true)
        {
            Console.WriteLine("\n*** Patient Visit Management System ***");
            Console.WriteLine("1. Add New Visit");
            Console.WriteLine("2. Update Visit");
            Console.WriteLine("3. Delete Visit");
            Console.WriteLine("4. Search by ID");
            Console.WriteLine("5. Show All Records");
            Console.WriteLine("6. Show Visits by Category");
            Console.WriteLine("7. Individual Visit Summary");
            Console.WriteLine("8. Total Visits by Type");
            Console.WriteLine("9. Weekly Visit Summary");
            Console.WriteLine("10. Generate Mock Data");
            Console.WriteLine("11. Exit");
            Console.Write("Choose option: ");
            
            string input = Console.ReadLine();
            
            if(input == "1")
            {
                addNewVisit(manager);
            }
            else if(input == "2")
            {
                updateVisit(manager);
            }
            else if(input == "3")
            {
                deleteVisit(manager);
            }
            else if(input == "4")
            {
                searchById(manager);
            }
            else if(input == "5")
            {
                manager.showAllRecords();
            }
            else if(input == "6")
            {
                manager.showVisitsByCategory();
            }
            else if(input == "7")
            {
                generateIndividualSummary(manager);
            }
            else if(input == "8")
            {
                manager.getTotalVisitsByType();
            }
            else if(input == "9")
            {
                manager.getWeeklySummary();
            }
            else if(input == "10")
            {
                generateMockData(manager);
            }
            else if(input == "11")
            {
                Console.WriteLine("Bye!");
                break;
            }
            else
            {
                Console.WriteLine("Wrong choice! Try again.");
            }
        }
    }

    private static void addNewVisit(PatientVisitManager manager)
    {
        Console.Write("Patient Name: ");
        string patientName = Console.ReadLine();
        
        Console.Write("Visit Date (yyyy-mm-dd) or Enter for today: ");
        string dateStr = Console.ReadLine();
        DateTime visitDate;
        if(string.IsNullOrEmpty(dateStr))
            visitDate = DateTime.Now;
        else
            visitDate = DateTime.Parse(dateStr);
        
        Console.Write("Visit Type: ");
        string visitType = Console.ReadLine();
        
        Console.Write("Description/Notes: ");
        string description = Console.ReadLine();
        
        Console.Write("Doctor Name (optional): ");
        string doctorName = Console.ReadLine();
        
        manager.AddVisit(patientName, visitDate, visitType, description, doctorName);
    }

    private static void updateVisit(PatientVisitManager manager)
    {
        Console.Write("Enter Visit ID: ");
        int id = int.Parse(Console.ReadLine());
        
        Console.Write("New Patient Name (Enter to skip): ");
        string patientName = Console.ReadLine();
        
        Console.Write("New Date (yyyy-mm-dd) (Enter to skip): ");
        string dateStr = Console.ReadLine();
        DateTime? visitDate = null;
        if(!string.IsNullOrEmpty(dateStr))
            visitDate = DateTime.Parse(dateStr);
        
        Console.Write("New Visit Type (Enter to skip): ");
        string visitType = Console.ReadLine();
        
        Console.Write("New Description (Enter to skip): ");
        string description = Console.ReadLine();
        
        Console.Write("New Doctor Name (Enter to skip): ");
        string doctorName = Console.ReadLine();
        
        manager.UpdateVisit(id, 
            string.IsNullOrEmpty(patientName) ? null : patientName,
            visitDate,
            string.IsNullOrEmpty(visitType) ? null : visitType,
            string.IsNullOrEmpty(description) ? null : description,
            string.IsNullOrEmpty(doctorName) ? null : doctorName);
    }

    private static void deleteVisit(PatientVisitManager manager)
    {
        Console.Write("Enter Visit ID to delete: ");
        int id = int.Parse(Console.ReadLine());
        manager.DeleteVisit(id);
    }

    private static void searchById(PatientVisitManager manager)
    {
        Console.Write("Enter Visit ID: ");
        int id = int.Parse(Console.ReadLine());
        PatientVisit result = manager.findById(id);
        manager.showVisit(result);
    }

    private static void generateIndividualSummary(PatientVisitManager manager)
    {
        Console.Write("Enter Visit ID for summary: ");
        int id = int.Parse(Console.ReadLine());
        manager.generateVisitSummary(id);
    }

    private static void generateMockData(PatientVisitManager manager)
    {
        Console.Write("How many mock entries to generate (default 350): ");
        string countStr = Console.ReadLine();
        int count = 350;
        if(!string.IsNullOrEmpty(countStr))
        {
            count = int.Parse(countStr);
        }
        manager.generateMockData(count);
    }
}